===============================================================
========================== STRUCTURE ==========================
===============================================================

Registers 
> R0-R3: pass argument values to return values from subroutine 
> R4-R10: local variables within subroutine
> R11: Frame Pointer (FP) 
> R12: Scratchpad Register / Return Register 
> R13: Stack Pointer (SP) 
> R14: Link Register (LR) 
> R15: Program Counter (PC) 
> CPSR 
 
Instructions 
> 0x00 to 0xFF 
 
Memory 
> 0x100 onwards 

Stack
> Starts at 0xFFFF FFFC, grows to lower memory address


===============================================================
======================== INSTRUCTIONS =========================
===============================================================

x 	EQU 	8		;Assigns immediate value 8 to the variable x, does not store anywhere 
Num1	DCD	0x1234		;Puts the number into MEMORY. Don’t need #. If at the start of the program, Num1 will store into 0x100.
	ADR	rstr, y		;Obtains the memory address of x and places it in rstr 

NZVC flag will only be affected by –S instructions: if the next instruction doesn’t have S, the NZVC flags will remain (e.g. as 1000) 


===============================================================
====================== ADDRESSING MODES =======================
===============================================================

Immediate value					MOV R1, #3
Register direct					MOV R1, R0
Register indirect				LDR R1, [R0]
Register indirect with offset			LDR R1, [R0, #4]
Register indirect with index			LDR R1, [R0, R2]
Register indirect with pre-autoindexing		LDR R1, [R0, #4]!
Register indirect with post-autoindexing	LDR R1, [R0], #4


 



